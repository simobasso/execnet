==============================================================================
execnet API in a nutshell
==============================================================================

execnet ad-hoc instantiates **gateways** to Python 
interpreter processes with which you can **remote execute
code** and exchange basic python objects through **channels**.

.. image:: _static/basic1.png

Gateways: connecting to another Python Interpreter
===================================================

.. currentmodule:: execnet

Gateway classes allow to ad-hoc instantiate local or
remote Python Interpreters and deploy code to them. 

.. autoclass:: PopenGateway

.. autoclass:: SshGateway

.. autoclass:: SocketGateway



remote_exec: execute source code remotely 
===================================================

.. currentmodule:: execnet.gateway

All gateways offer a simple method to execute source code 
in the connected interpreter:

.. automethod:: Gateway.remote_exec(source)

Here is an self-contained example for reading the process identifier::

  >>> import execnet, os
  >>> gw = execnet.PopenGateway()
  >>> channel = gw.remote_exec("""
  ...     import os
  ...     channel.send(os.getpid())
  ... """)
  >>> remote_pid = channel.receive()
  >>> remote_pid != os.getpid()
  True

If you'd like to avoid inlining source strings take a look
at the channelexec_ and command_ example.


.. _channelexec: examples.html#channelexec
.. _command: examples.html#command

.. _`Channel`: 
.. _`channel-api`: 
.. _`exchange data`: 

Channels: exchanging data with remote code
=======================================================

.. currentmodule:: execnet.gateway_base

A channel object allows to send and receive data between 
two asynchronously running programs.  

.. class:: Channel 

   .. automethod:: Channel.send(item)
   .. automethod:: Channel.receive()
   .. automethod:: Channel.setcallback(callback, endmarker=_NOENDMARKER)
   .. automethod:: Channel.makefile(mode, proxyclose=False)
   .. automethod:: Channel.close(error)
   .. automethod:: Channel.waitclose(timeout)
   .. autoattribute:: Channel.RemoteError


remote_status: get low-level execution info 
===================================================

.. currentmodule:: execnet.gateway

All gateways offer a simple method to obtain some status
information from the remote side. 

.. automethod:: Gateway.remote_status(source)

Calling this method tells you e.g. how many execution 
tasks are queued, how many are executing and how many
channels are active. 

.. _xspec:

creating gateways from a generic string format
===============================================================

``execnet`` supports a simple extensible format for 
specifying and configuring Gateways for remote execution.  

.. autofunction:: execnet.makegateway(xspec)

The following paramters are recognized by default:

* ``popen`` for a PopenGateway. 
* ``ssh=host`` for a SshGateway to the given host. 
* ``socket=address:port`` for a SocketGateway at the given address. 
* ``python=executable`` for specifying Python Interpreter executables
* ``chdir=path`` change remote working dir to given relative or absolute path
* ``nice=value`` decrease remote nice level if platforms supports it 

You can use a string specification to, for example, 
instantiate a simple new SshGateway:: 

    gateway = execnet.makegateway("ssh=myhost")

Here are some examples for valid specifications: 

* ``ssh=wyvern//python=python2.4//chdir=mycache`` specifies a Python2.4
  interpreter on the host wyvern.  The remote process will have 
  ``mycache`` as its current working directory. 

* ``popen//python=2.5//nice=20`` specification of a python2.5
  subprocess; running with the lowest CPU priority ("nice" level). 
  By default current dir will be the current dir of the instantiator.

* ``socket=192.168.1.4:8888`` specifies of a Python Socket server
  process that listens on 192.168.1.4:8888; current dir will be the
  'pyexecnet-cache' sub directory which is used a default for all remote
  processes.

rsync: synchronise filesystem with remote
===============================================================

``execnet`` implements a simple efficient rsyncing protocol. 
Here is a basic example::

    rsync = execnet.RSync('/tmp/source')
    gw = execnet.PopenGateway()
    rsync.add_target(gw, '/tmp/dest')
    rsync.send()

More info on the RSync class: 

.. currentmodule:: execnet
.. autoclass:: RSync
    :members: add_target,send


Debugging execnet
===============================================================

If you set the enviornment variable ``EXECNET_DEBUG`` to any value
trace-files will be written to ``execnet-debug-PID`` files in
the system temporary directory.  ``NUM`` will be the process id. 

