==============================================================================
execnet examples
==============================================================================

Work with Java objects from CPython
----------------------------------------

Use your CPython interpreter to connect to a Jython_ interpreter
and work with Java types::

    import execnet
    gw = execnet.PopenGateway("jython")
    channel = gw.remote_exec("""
        from java.util import Vector
        v = Vector()
        v.add('aaa')
        v.add('bbb')
        for val in v:
            channel.send(val)
    """)

    for item in channel:
        print (item)

will print on the CPython side::

    aaa
    bbb

.. _Jython: http://www.jython.org

Work with C# objects from CPython
----------------------------------------

(Experimental) use your CPython interpreter to connect to a IronPython_ interpreter
which can work with C# classes.  Here is an example for instantiating
a CLR Array instance and sending back its representation::

    import execnet
    gw = execnet.PopenGateway("ipy")

    channel = gw.remote_exec("""
        import clr
        clr.AddReference("System")
        from System import Array
        array = Array[float]([1,2])
        channel.send(str(array))
    """)
    print (channel.receive())

using Mono 2.0 and IronPython-1.1 this will print on the CPython side::

    System.Double[](1.0, 2.0)

.. note:: 
   Using IronPython needs more testing, likely newer versions
   will work better.  please feedback if you have information. 

.. _IronPython: http://www.IronPython.org

Compare cwd() of Popen Gateways
----------------------------------------

A PopenGateway has the same working directory as the instantiatior::

    >>> import execnet, os
    >>> gw = execnet.PopenGateway()
    >>> ch = gw.remote_exec("import os; channel.send(os.getcwd())")
    >>> res = ch.receive()
    >>> assert res == os.getcwd()
    >>> gw.exit()

Synchronously receive results from two sub processes 
-----------------------------------------------------

Use MultiChannels for receiving multiple results from remote code::

    >>> import execnet
    >>> ch1 = execnet.PopenGateway().remote_exec("channel.send(1)")
    >>> ch2 = execnet.PopenGateway().remote_exec("channel.send(2)")
    >>> mch = execnet.MultiChannel([ch1, ch2])
    >>> l = mch.receive_each()
    >>> assert len(l) == 2
    >>> assert 1 in l 
    >>> assert 2 in l 
   
Asynchronously receive results from two sub processes 
-----------------------------------------------------

Use ``MultiChannel.make_receive_queue()`` for asynchronously receiving 
multiple results from remote code.  This standard Queue provides 
``(channel, result)`` tuples which allows to determine where 
a result comes from::

    >>> import execnet
    >>> ch1 = execnet.PopenGateway().remote_exec("channel.send(1)")
    >>> ch2 = execnet.PopenGateway().remote_exec("channel.send(2)")
    >>> mch = execnet.MultiChannel([ch1, ch2])
    >>> queue = mch.make_receive_queue()
    >>> chan1, res1 = queue.get()  # you may also specify a timeout 
    >>> chan2, res2 = queue.get()
    >>> res1 + res2 
    3
    >>> assert chan1 in (ch1, ch2)
    >>> assert chan2 in (ch1, ch2)
    >>> assert chan1 != chan2

Receive file contents from remote SSH account 
-----------------------------------------------------

Here is a small program that you can use to retrieve
contents of remote files::

    import execnet
    # open a gateway to a fresh child process 
    gw = execnet.SshGateway('codespeak.net') 
    channel = gw.remote_exec("""
            for fn in channel:
                f = open(fn, 'rb')
                channel.send(f.read())
                f.close()
    """) 

    for fn in somefilelist: 
        channel.send(fn) 
        content = channel.receive()
        # process content 
     
    # later you can exit / close down the gateway
    gw.exit()


Instantiate a socket server in a new subprocess 
-----------------------------------------------------

The following example opens a PopenGateway, i.e. a python
child process, and starts a socket server within that process 
and then opens a second gateway to the freshly started
socketserver::
                
    import execnet 

    popengw = execnet.PopenGateway()
    socketgw = execnet.SocketGateway.new_remote(popengw, ("127.0.0.1", 0))

    print socketgw._rinfo() # print some info about the remote environment


Sending a module / checking if run through remote_exec 
--------------------------------------------------------------

You can pass a module object to ``remote_exec`` in which case
its source code will be sent.  No dependencies will be transferred
so the module must be self-contained or only use modules that are 
installed on the "other" side.  Module code can detect if it is 
running in a remote_exec situation by checking for the special 
``__name__`` attribute like this::

    if __name__ == '__channelexec__':
        # ... call module functions ... 
        


